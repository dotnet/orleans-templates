<Project>
  <!-- Set the repository root into a variable -->
  <PropertyGroup>
    <SourceRoot>$(MSBuildThisFileDirectory)</SourceRoot>
  </PropertyGroup>

  <!-- Set common properties regarding assembly information and nuget packages -->
  <PropertyGroup>
    <Authors>Microsoft</Authors>
    <Product>Microsoft Orleans Templates for Visual Studio 2017</Product>
    <Copyright>© Microsoft Corporation. All rights reserved.</Copyright>
    <PackageLicenseUrl>https://github.com/dotnet/Orleans#license</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/dotnet/Orleans</PackageProjectUrl>
    <PackageIconUrl>https://raw.githubusercontent.com/dotnet/orleans/gh-pages/assets/logo_128.png</PackageIconUrl>
    <PackageTags>Orleans Cloud-Computing Actor-Model Actors Distributed-Systems C# F# VB .NET Template</PackageTags>
    <PackageReleaseNotes></PackageReleaseNotes>
    <RepositoryUrl>https://github.com/dotnet/Orleans</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
  </PropertyGroup>

  <!-- Common compile parameters -->
  <PropertyGroup>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <NoWarn>$(NoWarn);CS2008</NoWarn>
  </PropertyGroup>

  <!-- Shared Package Versions -->
  <PropertyGroup>
    <!-- Test related packages -->
    <xUnitVersion>2.3.0</xUnitVersion>

    <!-- Tooling related packages -->
    <SourceLinkVersion>2.5.0</SourceLinkVersion>
  </PropertyGroup>

  <!-- Versioning properties -->
  <PropertyGroup>
    <VersionPrefix Condition=" '$(VersionPrefix)'=='' ">1.0.0</VersionPrefix>
    <VersionSuffix Condition=" '$(VersionSuffix)'=='' "></VersionSuffix>
  </PropertyGroup>

  <!-- For Debug builds generated a date/time dependent version suffix -->
  <PropertyGroup Condition=" '$(Configuration)'=='Debug' ">
    <VersionSuffix Condition=" '$(VersionSuffix)'=='' ">dev</VersionSuffix>
    <VersionSuffix Condition=" '$(VersionDateSuffix)'!='' ">$(VersionSuffix)-$(VersionDateSuffix)</VersionSuffix>
  </PropertyGroup>

  <PropertyGroup>
    <VersionPrefix Condition=" '$(VersionPrefix)' == '' ">1.0.0</VersionPrefix>
    <Version Condition=" '$(VersionSuffix)' != '' ">$(VersionPrefix)-$(VersionSuffix)</Version>
    <Version Condition=" '$(Version)' == '' ">$(VersionPrefix)</Version>
  </PropertyGroup>

  <PropertyGroup>
    <VsixVersion>$(VersionPrefix)</VsixVersion>
  </PropertyGroup>

  <!-- Set output folder for created NuGet packages -->
<!--
  <PropertyGroup>
    <PackageOutputPath Condition=" '$(PackageOutputPath)'=='' ">$(SourceRoot)/Artifacts/$(Configuration)</PackageOutputPath>
  </PropertyGroup>
-->

  <Choose>
    <When Condition="'$(OfficialBuild)' != 'true'">
      <!-- On non-official builds we don't burn in a git sha.  In large part because it
           hurts our determinism efforts as binaries which should be the same between
           builds will not (due to developers building against different HEAD
           values -->
      <PropertyGroup>
        <GitHeadSha>&lt;developer build&gt;</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(BUILD_SOURCEVERSION)</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' == '' AND '$(GIT_COMMIT)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(GIT_COMMIT)</GitHeadSha>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <GitHeadSha>Not found</GitHeadSha>
        <DotGitDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory).git'))</DotGitDir>
        <HeadFileContent Condition="Exists('$(DotGitDir)/HEAD')">$([System.IO.File]::ReadAllText('$(DotGitDir)/HEAD').Trim())</HeadFileContent>
        <RefPath Condition="$(HeadFileContent.StartsWith('ref: '))">$(DotGitDir)/$(HeadFileContent.Substring(5))</RefPath>
        <GitHeadSha Condition="'$(RefPath)' != '' AND Exists('$(RefPath)')">$([System.IO.File]::ReadAllText('$(RefPath)').Trim())</GitHeadSha>
        <GitHeadSha Condition="'$(HeadFileContent)' != '' AND '$(RefPath)' == ''">$(HeadFileContent)</GitHeadSha>
      </PropertyGroup>
    </Otherwise>
  </Choose>
</Project>
